<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/12/hello-world/"/>
      <url>/2019/09/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式</title>
      <link href="/2019/09/10/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/09/10/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知它的依赖对象。观察者模式属于行为型模式。</p></blockquote><p><strong>使用场景</strong></p><ul><li>一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。</li><li>一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。</li><li>一个对象必须通知其他对象，而并不知道这些对象是谁。</li><li>需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。<a id="more"></a></li></ul><p><strong>注意事项：</strong> </p><ol><li>JAVA 中已经有了对观察者模式的支持类。</li><li>避免循环引用。 </li><li>如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。</li></ol><p><em>简单的代码实现</em></p><pre><code>/** * 日志系统 * * @author 719383495@qq.com |719383495qq@gmail.com |gfu * @date 2019/8/27 */public class Main {    public static void main(String[] args) {        SubjectImpl subject = new SubjectImpl();        new ObserverImpl(subject);        new ObserverImpl(subject);        new ObserverImpl(subject);        subject.setUsername("张三");        new ObserverImpl(subject);        subject.setUsername("李四");        subject.notifyObserver();        new ObserverImpl(subject);        new ObserverImpl(subject);        subject.setUsername("王五");        new ObserverImpl(subject);        subject.notifyObserver();    }}</code></pre><pre><code>public interface Observer {    void update(String username, int id);}</code></pre><pre><code>public class ObserverImpl implements Observer {    private String username;    private Subject subject;    private int id;    @Override    public void update(String username,int id) {        this.username = username;        this.id = id;        display();    }    public ObserverImpl(Subject subject) {        this.subject = subject;        this.subject.registerObserver(this);    }    public void display() {        System.out.println("update" +this.id+" : "+ this.username);    }}</code></pre><pre><code>public interface Subject {    void registerObserver(Observer observer);    void removeObserver(Observer observer);    void notifyObserver();}</code></pre><pre><code>import java.util.ArrayList;public class SubjectImpl implements Subject {    private ArrayList&lt;Observer&gt; observers;    private String username;    private int id;    public SubjectImpl() {        observers = new ArrayList&lt;&gt;();    }    @Override    public void registerObserver(Observer observer) {        observers.add(observer);    }    @Override    public void removeObserver(Observer observer) {        observers.remove(observer);    }    @Override    public void notifyObserver() {        int len = observers.size();        for (int i = 0; i &lt;len; i++) {            observers.get(i).update(username, i);        }    }    public void setUsername(String username) {        this.username = username;    }}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> designe pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> designe pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo demo</title>
      <link href="/2019/09/10/test/"/>
      <url>/2019/09/10/test/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>充满学习热情的帅小伙<br><a href="mailto:719383495qq@gmail.com" target="_blank" rel="noopener">719383495qq@gmail.com</a><br><a href="mailto:719383495@qq.com" target="_blank" rel="noopener">719383495@qq.com</a><br>gfu<br><a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> link </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
